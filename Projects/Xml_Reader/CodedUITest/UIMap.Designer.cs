// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfMenuItem uIOpenMenuItem = this.UIQuickXmlReaderWindow.UIItemMenu.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UIOpenxmlfiletoreadWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIThisPCTreeItem.UIDesktopTreeItem;
            WinEdit uINameEdit = this.UIOpenxmlfiletoreadWindow.UIItemWindow.UIWindowsxmlListItem.UINameEdit;
            WinComboBox uIFilenameComboBox = this.UIOpenxmlfiletoreadWindow.UIItemWindow1.UIFilenameComboBox;
            WinControl uIOpenxmlfiletoreadDialog = this.UIOpenxmlfiletoreadWindow.UIOpenxmlfiletoreadDialog;
            WinButton uIOpenButton = this.UIOpenxmlfiletoreadWindow.UIOpenWindow.UIOpenButton;
            WpfWindow uIQuickXmlReaderWindow1 = this.UIQuickXmlReaderWindow;
            WpfEdit uIRt1Edit = this.UIQuickXmlReaderWindow.UIRt1Edit;
            WpfEdit uITextBox1Edit = this.UIQuickXmlReaderWindow.UITextBox1Edit;
            WpfButton uISearchButton = this.UIQuickXmlReaderWindow.UISearchButton;
            WpfList uILs1List = this.UIQuickXmlReaderWindow.UILs1List;
            WpfButton uICloseButton = this.UIQuickXmlReaderWindow.UIQuickXmlReaderTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\Xml_Reader\Xml_Reader\bin\Debug\Xml_Reader.exe'
            ApplicationUnderTest uIQuickXmlReaderWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIQuickXmlReaderWindowExePath, this.RecordedMethod1Params.UIQuickXmlReaderWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(46, 10));

            // Click 'Desktop' -> 'This PC' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(33, 13));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(90, 12));

            // Select 'Windows.xml' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod1Params.UIFilenameComboBoxEditableItem;

            // Click 'Open xml file to read' Dialog
            Mouse.Click(uIOpenxmlfiletoreadDialog, new Point(487, 433));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(31, 18));

            // Maximize window 'Quick Xml Reader'
            uIQuickXmlReaderWindow1.SetProperty("State", ControlStates.Maximized);

            // Click 'rt1' text box
            Mouse.Click(uIRt1Edit, new Point(919, 401));

            // Type 'hash' in 'TextBox1' text box
            uITextBox1Edit.Text = this.RecordedMethod1Params.UITextBox1EditText;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(30, 9));

            // Select 'Xml_Reader.MainWindow+lists' in 'ls1' list box
            uILs1List.SelectedItemsAsString = this.RecordedMethod1Params.UILs1ListSelectedItemsAsString;

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 0));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WpfTitleBar uIQuickXmlReaderTitleBar = this.UIQuickXmlReaderWindow.UIQuickXmlReaderTitleBar;
            WpfMenuItem uIOpenMenuItem = this.UIQuickXmlReaderWindow.UIItemMenu.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenxmlfiletoreadWindow.UIItemWindow.UIWindowsxmlListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenxmlfiletoreadWindow.UIOpenWindow.UIOpenButton;
            WpfWindow uIQuickXmlReaderWindow1 = this.UIQuickXmlReaderWindow;
            WinWindow uIQuickXmlReaderWindow11 = this.UIQuickXmlReaderWindow1;
            WpfEdit uITextBox1Edit = this.UIQuickXmlReaderWindow.UITextBox1Edit;
            WpfButton uISearchButton = this.UIQuickXmlReaderWindow.UISearchButton;
            WpfList uILs1List = this.UIQuickXmlReaderWindow.UILs1List;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\Xml_Reader\Xml_Reader\bin\Debug\Xml_Reader.exe'
            ApplicationUnderTest uIQuickXmlReaderWindow = ApplicationUnderTest.Launch(this.RecordedMethod2Params.UIQuickXmlReaderWindowExePath, this.RecordedMethod2Params.UIQuickXmlReaderWindowAlternateExePath);

            // Click 'Quick Xml Reader' title bar
            Mouse.Click(uIQuickXmlReaderTitleBar, new Point(232, 14));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(50, 9));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(80, 8));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(37, 16));

            // Maximize window 'Quick Xml Reader'
            uIQuickXmlReaderWindow1.SetProperty("State", ControlStates.Maximized);

            // Click 'Quick Xml Reader' window
            Mouse.Click(uIQuickXmlReaderWindow11, new Point(1199, 54));

            // Type 'windows' in 'TextBox1' text box
            uITextBox1Edit.Text = this.RecordedMethod2Params.UITextBox1EditText;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(29, 16));

            // Select 'Xml_Reader.MainWindow+lists' in 'ls1' list box
            uILs1List.SelectedItemsAsString = this.RecordedMethod2Params.UILs1ListSelectedItemsAsString;
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public UIQuickXmlReaderWindow UIQuickXmlReaderWindow
        {
            get
            {
                if ((this.mUIQuickXmlReaderWindow == null))
                {
                    this.mUIQuickXmlReaderWindow = new UIQuickXmlReaderWindow();
                }
                return this.mUIQuickXmlReaderWindow;
            }
        }
        
        public UIOpenxmlfiletoreadWindow UIOpenxmlfiletoreadWindow
        {
            get
            {
                if ((this.mUIOpenxmlfiletoreadWindow == null))
                {
                    this.mUIOpenxmlfiletoreadWindow = new UIOpenxmlfiletoreadWindow();
                }
                return this.mUIOpenxmlfiletoreadWindow;
            }
        }
        
        public UIQuickXmlReaderWindow1 UIQuickXmlReaderWindow1
        {
            get
            {
                if ((this.mUIQuickXmlReaderWindow1 == null))
                {
                    this.mUIQuickXmlReaderWindow1 = new UIQuickXmlReaderWindow1();
                }
                return this.mUIQuickXmlReaderWindow1;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private UIQuickXmlReaderWindow mUIQuickXmlReaderWindow;
        
        private UIOpenxmlfiletoreadWindow mUIOpenxmlfiletoreadWindow;
        
        private UIQuickXmlReaderWindow1 mUIQuickXmlReaderWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\Xml_Reader\Xml_Reader\bin\Debug\Xml_Reader.exe'
        /// </summary>
        public string UIQuickXmlReaderWindowExePath = "C:\\Users\\PrabaKarthi\\Documents\\Visual Studio 2013\\Projects\\Xml_Reader\\Xml_Reader\\" +
            "bin\\Debug\\Xml_Reader.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\Xml_Reader\Xml_Reader\bin\Debug\Xml_Reader.exe'
        /// </summary>
        public string UIQuickXmlReaderWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\Xml_Reader\\Xml_Reader\\bin\\Deb" +
            "ug\\Xml_Reader.exe";
        
        /// <summary>
        /// Select 'Windows.xml' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Windows.xml";
        
        /// <summary>
        /// Type 'hash' in 'TextBox1' text box
        /// </summary>
        public string UITextBox1EditText = "hash";
        
        /// <summary>
        /// Select 'Xml_Reader.MainWindow+lists' in 'ls1' list box
        /// </summary>
        public string UILs1ListSelectedItemsAsString = "Xml_Reader.MainWindow+lists";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\Xml_Reader\Xml_Reader\bin\Debug\Xml_Reader.exe'
        /// </summary>
        public string UIQuickXmlReaderWindowExePath = "C:\\Users\\PrabaKarthi\\Documents\\Visual Studio 2013\\Projects\\Xml_Reader\\Xml_Reader\\" +
            "bin\\Debug\\Xml_Reader.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\Xml_Reader\Xml_Reader\bin\Debug\Xml_Reader.exe'
        /// </summary>
        public string UIQuickXmlReaderWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\Xml_Reader\\Xml_Reader\\bin\\Deb" +
            "ug\\Xml_Reader.exe";
        
        /// <summary>
        /// Type 'windows' in 'TextBox1' text box
        /// </summary>
        public string UITextBox1EditText = "windows";
        
        /// <summary>
        /// Select 'Xml_Reader.MainWindow+lists' in 'ls1' list box
        /// </summary>
        public string UILs1ListSelectedItemsAsString = "Xml_Reader.MainWindow+lists";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIQuickXmlReaderWindow : WpfWindow
    {
        
        public UIQuickXmlReaderWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Quick Xml Reader";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Quick Xml Reader");
            #endregion
        }
        
        #region Properties
        public UIItemMenu UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu(this);
                }
                return this.mUIItemMenu;
            }
        }
        
        public WpfEdit UIRt1Edit
        {
            get
            {
                if ((this.mUIRt1Edit == null))
                {
                    this.mUIRt1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIRt1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "rt1";
                    this.mUIRt1Edit.WindowTitles.Add("Quick Xml Reader");
                    #endregion
                }
                return this.mUIRt1Edit;
            }
        }
        
        public WpfEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBox1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBox1";
                    this.mUITextBox1Edit.WindowTitles.Add("Quick Xml Reader");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        
        public WpfButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button1";
                    this.mUISearchButton.WindowTitles.Add("Quick Xml Reader");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }
        
        public WpfList UILs1List
        {
            get
            {
                if ((this.mUILs1List == null))
                {
                    this.mUILs1List = new WpfList(this);
                    #region Search Criteria
                    this.mUILs1List.SearchProperties[WpfList.PropertyNames.AutomationId] = "ls1";
                    this.mUILs1List.WindowTitles.Add("Quick Xml Reader");
                    #endregion
                }
                return this.mUILs1List;
            }
        }
        
        public UIQuickXmlReaderTitleBar UIQuickXmlReaderTitleBar
        {
            get
            {
                if ((this.mUIQuickXmlReaderTitleBar == null))
                {
                    this.mUIQuickXmlReaderTitleBar = new UIQuickXmlReaderTitleBar(this);
                }
                return this.mUIQuickXmlReaderTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemMenu mUIItemMenu;
        
        private WpfEdit mUIRt1Edit;
        
        private WpfEdit mUITextBox1Edit;
        
        private WpfButton mUISearchButton;
        
        private WpfList mUILs1List;
        
        private UIQuickXmlReaderTitleBar mUIQuickXmlReaderTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemMenu : WpfMenu
    {
        
        public UIItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Quick Xml Reader");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFileMenuItem : WpfMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Quick Xml Reader");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Quick Xml Reader");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIQuickXmlReaderTitleBar : WpfTitleBar
    {
        
        public UIQuickXmlReaderTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("Quick Xml Reader");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Quick Xml Reader");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenxmlfiletoreadWindow : WinWindow
    {
        
        public UIOpenxmlfiletoreadWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open xml file to read";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open xml file to read");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public WinControl UIOpenxmlfiletoreadDialog
        {
            get
            {
                if ((this.mUIOpenxmlfiletoreadDialog == null))
                {
                    this.mUIOpenxmlfiletoreadDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIOpenxmlfiletoreadDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Open xml file to read";
                    this.mUIOpenxmlfiletoreadDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIOpenxmlfiletoreadDialog.WindowTitles.Add("Open xml file to read");
                    #endregion
                }
                return this.mUIOpenxmlfiletoreadDialog;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private WinControl mUIOpenxmlfiletoreadDialog;
        
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open xml file to read");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open xml file to read");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open xml file to read");
            #endregion
        }
        
        #region Properties
        public UIThisPCTreeItem UIThisPCTreeItem
        {
            get
            {
                if ((this.mUIThisPCTreeItem == null))
                {
                    this.mUIThisPCTreeItem = new UIThisPCTreeItem(this);
                }
                return this.mUIThisPCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIThisPCTreeItem mUIThisPCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIThisPCTreeItem : WinTreeItem
    {
        
        public UIThisPCTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "This PC";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open xml file to read");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "2";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Open xml file to read");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open xml file to read");
            #endregion
        }
        
        #region Properties
        public UIWindowsxmlListItem UIWindowsxmlListItem
        {
            get
            {
                if ((this.mUIWindowsxmlListItem == null))
                {
                    this.mUIWindowsxmlListItem = new UIWindowsxmlListItem(this);
                }
                return this.mUIWindowsxmlListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIWindowsxmlListItem mUIWindowsxmlListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWindowsxmlListItem : WinListItem
    {
        
        public UIWindowsxmlListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Windows.xml";
            this.WindowTitles.Add("Open xml file to read");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open xml file to read");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open xml file to read");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open xml file to read");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open xml file to read");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open xml file to read");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIQuickXmlReaderWindow1 : WinWindow
    {
        
        public UIQuickXmlReaderWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Quick Xml Reader";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Quick Xml Reader");
            #endregion
        }
    }
}
